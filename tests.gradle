buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }
    dependencies {
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.7.0'
        classpath('org.ajoberstar:grgit:1.5.0')
    }
}

configurations {
    mockServer
}

dependencies {
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
    testCompile("org.spockframework:spock-spring:1.0-groovy-2.4")
    testCompile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')
    testCompile("cglib:cglib:3.1")
    testCompile(group: 'com.bsb.fms', name: 'bsb-fms-test-utils', version: '1.0.9')

    mockServer("by.stub:stubby4j:3.3.0")
}

sourceSets {
    acceptanceSource {
        groovy { srcDirs = ['src/acceptance/groovy'] }
        resources.srcDir file('src/acceptance/resources')
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
    testSource {
        groovy { srcDirs = ['src/test/groovy'] }
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Unit Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task runUnitTests(type: Test) {
    description = 'Runs the tests'
    outputs.upToDateWhen { false }
    testClassesDir = sourceSets.testSource.output.classesDir
    classpath = sourceSets.testSource.runtimeClasspath
    reports.junitXml.destination = 'build/test-results'
}

task runAcceptance(type: Test, dependsOn: assemble) {
    description = 'Runs the acceptance tests'
    outputs.upToDateWhen { false }
    systemProperties System.properties // This is need for test/ stage tests - DO NOT REMOVE
    def isRunningLocally = (System.properties['acceptanceEnv'] == null || System.properties['acceptanceEnv'] == 'local')
    doFirst {
        if (isRunningLocally) {
            tasks.setupLocalDockerEnv.execute()
            tasks.startDocker.execute()
            def maxCount = 60
            def count = 0
            while (count < maxCount) {
                def text = ['curl', "http://localhost:8080/info"].execute().text
                if (text.size() > 0) {
                    break
                }
                count++
                sleep 1000
                println "Waiting for local app startup.  Count = " + count + "/" + maxCount
            }
        }
    }

    testClassesDir = sourceSets.acceptanceSource.output.classesDir
    classpath = sourceSets.acceptanceSource.runtimeClasspath
    reports.junitXml.destination = 'build/test-results'
    reports.html.destination = 'build/reports/acceptanceTests'

    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            println "Acceptance Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            if (isRunningLocally) {
                tasks.stopDocker.execute()
                tasks.cleanupLocalDockerEnv.execute()
            }
        }
    }
}

task setupLocalDockerEnv(type: Exec) {
    commandLine 'cp', jar.archivePath, './util/bin/current_build.jar'
}

task cleanupUtilBin(type: Delete) {
    outputs.upToDateWhen { false }
    delete './util/bin/current_build.jar'
}

task cleanupLocalDockerEnv << {
    tasks.cleanupUtilBin.execute()
}

task startDocker() {
    doLast {
        exec {
            environment "appName", "${appName}"
            environment "version", "${version}"
            commandLine 'docker-compose', 'up', '-d'
        }
    }
}

task stopDocker() {
    doLast {
        exec {
            commandLine 'docker-compose', 'stop'
            ignoreExitValue true
        }
        exec {
            commandLine 'docker-compose', 'rm', '-f'
            ignoreExitValue true
        }
        exec {
            commandLine "docker", "rmi", "${appName}:${version}"
            ignoreExitValue true
        }
    }
}

task startDebuggingDocker() {
    doLast {
        exec {
            commandLine 'docker-compose', '--file', 'docker-compose-debug.yml', 'up', '-d'
        }
    }
}

task stopDebuggingDocker() {
    doLast {
        exec {
            commandLine 'docker-compose', '--file', 'docker-compose-debug.yml', 'stop'
            ignoreExitValue true
        }
        exec {
            commandLine 'docker-compose', '--file', 'docker-compose-debug.yml', 'rm', '-f'
            ignoreExitValue true
        }
    }
}
test.finalizedBy runAcceptance
